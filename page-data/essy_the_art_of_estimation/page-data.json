{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/essy_the_art_of_estimation/",
    "result": {"data":{"markdownRemark":{"html":"<p>나는 2019년에 300명대 회사로 이직하고 나서 최근까지도 일정 추산에 애를 먹었다. 이전 직장에서는 일정 추산 회의를 스프린트마다 오래 하고 그랬는데 내가 놀란 것은 이직을 하고 나서 가장 부족했던 능력이 \"일정 추산\"이었다는 점이다. 즉, 나는 일정 추산 능력이 이직 전까진 형편없는 수준이었다. 만일 내가 앞으로 신입을 교육시킨다고 할 때 어떻게 하면 신입이 더 일정 추산을 잘할 수 있게 도와줄까를 고민하면서 5가지 포인트를 뽑아 정리했다.</p>\n<h3>일정 추산은 중요하다</h3>\n<p>일정 추산은 중요하다. 이 중요도는 조직이 클수록 이에 비례해 크다. 아니, 이는 지수함수적(기하급수적)으로 늘어난다. 의외로 일정 추산이 중요하지 않다고 여기는 개발자들이 많다. 내가 그랬다. 과거의 나처럼 \"그냥 열심히 하는 거 아니냐?\" 이런 태도로 일정을 추산하면 번아웃은 당신의 가장 친한 친구가 될 것이며 주변의 동료들은 당신에게 불신과 원망의 눈길을 레이저처럼 마구마구 쏘아줄 것이다. 하나만 기억하자: 개인이 실패한 일정 추산의 비용은 조직 전체가 감당해야 한다. 이해가 안 되면 머릿속으로 시뮬레이션을 해보자. 내 일정이 어긋났을 때 이에 의존하는 다른 일정이 지연되고 또 그에 의존하는 다른 일정이 지연되고, …를 반복하면 남는 것은 일정 추산의 정확도를 높여야겠다는 각오뿐이다. 일정 추산을 메타 스킬이 아닌 <strong>업무의 일부</strong>로 보고 어림짐작이 아닌 <strong>공식적인 약속</strong>의 관점에서 봐야 한다. 따라서 이상한 매니저나 상사가 일정 추산을 건너뛰거나 뭉뚱거리거나 하면 역으로 작업자의 입장에서 업무 추산의 중요성을 강조해야 한다. 그것이 번아웃이나 불합리한 책임 추궁에서 자신의 몸을 지키는 방법이다. 물론 이 중요성은 일정 추산의 실패 등의 경험을 통해 뼈저리게 느껴야 하는 부분도 있다. 머리만으로는 알기 힘들다. 경험을 통한 체득이 중요한 기술이 바로 일정 추산이다.</p>\n<h3>일정 추산은 어렵다</h3>\n<p>일정 추산은 어렵다. 장난이 아니고 겁나겁나 어렵다. 이 역시 멈춰서서 고민해보면 지점이다. 왜 일정 추산이 어려울까? 이는 계획(planning)의 영역이자 미래에 대한 예측의 영역이기 때문이다. \"사람들이 어떤 일을 마치는데 걸리는 시간을 예측할 때 비현실적인 최적상황을 가정하는 경향\"을 **계획오류(Planing fallacy)**라고 한다. 이 계획오류의 근본적인 원인은 낙관편향(Optimism bias) 때문인데, 이는 다음과 같은 낙관들로 구성된다:</p>\n<ol>\n<li>본인의 업무 능력을 과대평가한다</li>\n<li>해당 업무가 의존 중인 모든 일이 다 잘 풀렸을 때를 가정한다</li>\n<li>해당 계획에 다른 변수가 없을 거라고 가정한다</li>\n<li>본인의 계획 능력을 과대평가한다</li>\n</ol>\n<p>즉, 일반적인 경우 인간은 '나쁜 일은 일어나지 않을 것'이라 가정하고 본인의 능력을 필요 이상으로 과신하기 때문에 일정 추산에 실패하는 것이다. 하지만 너무 슬퍼할 필요는 없다. 경력이 10년, 20년이 넘어가는 사람들도 종종 일정 추산에 실패한다. 따라서 실수는 할 수 있다. 문제는 실수를 반복하지 않도록, 특히 연속으로 같은 실수를 반복하지 않도록 연습하고 또 연습하는 것이다. 완벽한 계획이 비현실적인만큼 완벽한 일정 추산도 없다는 사실을 명심하자.</p>\n<h3>일정 추산은 비관적으로</h3>\n<p>위에서 일정 추산의 실패를 일으키는 <strong>계획오류</strong>가 <strong>낙관편향</strong>에 의해 발생한다는 사실을 언급한 바 있다. 그렇기 때문에 낙관편향을 보정하는 방향이 이에 대한 해결책이라는 사실을 어렵지 않게 추론할 수 있다. 즉, 더 나은 일정추산을 위해서는 비관주의(pessimism)적으로 일정을 추산할 필요가 있다. 이러한 관점에서 가장 자주 쓰이는 기법은 일정에 무조건 버퍼(buffer)를 두는 것이다. 여기서 버퍼는 엘리 골드렛(Dr. Eli Goldratt)의 제약 이론(Theory of constraints)에서 유래한 개념으로서 어느 정도 여유를 두면 사고가 나더라도 이에 대응할 수 있는 안전 여유를 얻게 된다는 문장으로 요약할 수 있다. 여기서 이 여유분이 버퍼에 해당한다. 즉, 일정 추산에 있어 여유분의 작업 시간을 버퍼로 넣게 되면 만일의 사태, 즉, 본인이 생각했던 것보다 생산성이 나오지 않거나 불의의 변수나 사고가 발생했을 때에도 유연하게 대응할 수 있게 된다.</p>\n<h3>이르게 끝내는 것이 늦게 끝내는 것보다 낫다</h3>\n<p>이건 논쟁이 있을 수 있는 영역이지만, 나는 굳이 일정추산에 실패하자면 이르게 끝내는 것이 늦게 끝내는 것보다 낫다고 본다. 위에서 비관적으로 일정 추산을 하다보면 생각보다 업무가 일찍 끝나는 경우가 늘어난다. 이때의 비용은 업무가 예측한 시점보다 늦게 끝날 때의 비용에 비하면 훨씬 적다. 게다가 확보된 여윳시간은 코드 리뷰나 테스팅 등으로 업무 결과물의 품질을 높이는데 쓰일 수도 있다. 반대로, 업무가 예측한 시점보다 늦게 끝나거나 일정이 너무 타이트하게 주어졌을 경우, 그 대가는 낮은 코드 퀄리티 또는 낮은 코드 커버리지로 돌아올 때가 많았다. 이는 마감이 다가오면서 작업자가 조급함에 업무 품질을 일정 부분 포기하는데 기인하는 것이다. 그러니까 자신이 없다면 업무 일정을 크게 부르고 여윳분의 시간을 업무 품질을 높이는데 쓰자.</p>\n<h3>업무 추산은 추상적 요소의 정량화다</h3>\n<p>업무 추산의 본질에 대해서 고민해보자. 내 판단에 업무 추산의 본질은 업무와 관련된 여러 가지 요소들(업무의 양, 불확실성, 종속성 등)을 시간이라는 화폐로 정량화하는 과정이다. 여기서 여러가지 요소들은 대개 추상적이지만 이를 정량화하지 않고는 프로젝트를 어느 정도 예산 내에 마칠 수 있을지 알 수 없기 때문에 일정 추산이 필요한 것이다. 예컨대, 업무의 일부에 불확실성(uncertainty)이 높다면 굳이 그 불확실성이 확실하게 될 때까지 고민할 필요가 없다. 딱 그것이 불확실한 만큼 업무 일정을 크게 부르면 된다. **추상적 요소의 정량화(quantization)**라는 명제만 기억하면 업무 추산은 이름 없는 공포로만 느껴지지 않을 것이다.</p>\n<h2>결론</h2>\n<p>내가 꼽은 일정 관리의 포인트들은 기본적인 것들이다. 하지만 나는 실무를 통해 그 기본의 중요성을 매일 체감하면서 실천하기가 얼마나 어려운지 깨달았다. 그래서 나는 일정 관리의 기본은 일정 관리가 생각보다 중요하고 또 그만큼 어려운 기술(art)이라는 점을 명심하고 이를 실무를 통해 체득하는 것이 먼저라고 믿는다. 이후에는 <strong>낙관편향</strong>의 위험성을 인지하고 비관적으로 업무를 추산한다면 보다 나은 업무 추산 결과를 낼 수 있다고 본다. 마지막으로, 업무 추산이 추상적 요소의 정량화라는 사실을 기억한다면 굳이 불필요하게 업무 추산에 두려움을 갖지 않고 업무 추산에 임할 수 있을 거라고 믿는다. 뭐, 극도로 불확실하고 극도로 추상적인 업무가 주어진다면 뭐, 한 500년 정도 부르면 되지 않나.</p>","frontmatter":{"title":"[에세이] 이것만 기억하자: 일정 추산의 기술"},"excerpt":"나는 2019년에 30…"}},"pageContext":{"slug":"/essy_the_art_of_estimation/"}},
    "staticQueryHashes": ["3159585216","63159454"]}