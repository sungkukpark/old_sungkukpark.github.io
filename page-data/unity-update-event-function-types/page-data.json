{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/unity-update-event-function-types/",
    "result": {"data":{"markdownRemark":{"html":"<p>본문은 Update 이벤트 함수 3형제인 FixedUpdate, Update, LateUpdate를 개발자에게 친숙한 순서인 Update, LateUpdate, FixedUpdate 순서로 소개하는 글이다. 각 함수에 해당하는 유니티 공식 문서를 참고했으며 예제 프로젝트를 빌드하면서 새로이 확인한 사항들도 본문에 추가했다. 최근 필자가 유니티 클라이언트 면접 당시 기출되었던 질문이므로 면접을 앞두고 있다면 한번 읽어봐도 좋을 것이다.</p>\n<h2>MonoBehaviour.Update()</h2>\n<p>Update 함수는 MonoBehaviour가 활성화되어 있을 때 매 프레임마다 호출된다.\nUpdate는 유니티에서 가장 자주 사용되는 함수 중 하나이다.\n그러나 모든 MonoBehaviour가 Update 함수를 가지고 있어야 하는 것은 아니다.</p>\n<h3>UpdateExampleClass 예제에 대한 설명</h3>\n<ol>\n<li>본 예제는 유니티의 인스펙터 상에서 UpdateExampleClass (Script)를 꺼둔 상태에서의 동작을 기술한다.</li>\n<li>UpdateExampleClass는 Awake의 호출과 함께 시작된다.</li>\n<li>이때, 해당 게임 오브젝트는 false 값을 가진 activeSelf 변수를 가진다.</li>\n<li>Start와 Update 함수들을 호출하기 위해 유니티 인스펙터 상에서 UpdateExampleClass (Script)를 활성화시키자.</li>\n<li>activeSelf가 true로 바뀔 때 Start()와 Update() 함수들이 호출되어 결과적으로는 UpdateExampleClass가 실행될 것이다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpdateExampleClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> update<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Awake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Awake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        update <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WaitForSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        update <span class=\"token operator\">+=</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>update <span class=\"token operator\">></span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            update <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n            Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Update\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 위의 UpdateExampleClass가 유니티 상에서 활성화되었다고 가정할 때, 콘솔에 출력될 각 함수들의 호출 순서 내지 문자열은 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Awake\nStart1\nUpdate\nUpdate\nStart2\nUpdate\nUpdate\nUpdate\nUpdate\n<span class=\"token comment\">// (...) MonoBehaviour가 활성화된 경우 \"Update\"만 무한 반복</span></code></pre></div>\n<p>여기서 \"Start2\" 이전에 \"Update\"가 2번 출력되는 것은 코루틴으로 구현된 Start()의 호출 간격이 2.5초이기 때문이다.</p>\n<h2>MonoBehaviour.LateUpdate()</h2>\n<p>LateUpdate 함수는 Update 함수와 마찬가지로 MonoBehaviour가 활성화되어 있을 때 매 프레임마다 호출된다.</p>\n<p>단, LateUpdate는 모든 Update 함수들이 호출된 이후에 호출된다.\n이는 스크립트의 호출에 있어 순서를 부여할 때 유용하다.\n예컨대, 팔로우 카메라(follow camera)는 반드시 LateUpdate에 구현되어야 한다.\n왜냐하면 해당 오브젝트가 Update 함수 안에서 움직였을 가능성이 존재하기 때문이다.\n또한, 유니티 상에서 LateUpdate는 Update와 마찬가지로 코루틴(Coroutine)으로 사용할 수 없다.</p>\n<h3>LateUpdate에 대한 부가적인 정보</h3>\n<ol>\n<li>LateUpdate 함수 안에서 직전의 LateUpdate로부터 경과된 시간(elapsed time)를 계산하려면 Time.deltaTime을 사용하라.</li>\n<li>LateUpdate 함수는 해당 MonoBehaviour가 활성화되어 있을 때에만 호출된다.</li>\n<li>LateUpdate 함수를 호출하려면 해당 컴포넌트 내에서 해당 함수를 오버라이드(override)하라.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LateUpdateExampleClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Update\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LateUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LateUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 위의 LateUpdateExampleClass가 유니티 상에서 활성화되었다고 가정할 때, 콘솔에 출력될 각 함수들의 호출 순서 내지 문자열은 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Update\nLateUpdate\nUpdate\nLateUpdate\n<span class=\"token comment\">// (...) MonoBehaviour가 활성화된 경우 무한 반복</span></code></pre></div>\n<h2>MonoBehaviour.FixedUpdate()</h2>\n<p>FixedUpdate는 MonoBehaviour가 활성화되어 있을 때 매 고정 프레임레이트 프레임(fixed framerate frame)마다 반복된다.</p>\n<p>FixedUpdate는 강체(Rigidbody)를 다룰 때 Update 대신 사용해야만 한다. 예컨대, 강체에 일정한 힘을 가할 때 매 프레임마다 호출되는 Update 함수 내부가 아니라 매 고정 프레임마다 해당 힘을 목표가 되는 강체에 가해야 한다.</p>\n<p>유니티 공식 문서인 <a href=\"https://docs.unity3d.com/Manual/ExecutionOrder.html\">이벤트 함수의 호출 순서(Execution Order of Event Functions)</a>의 <a href=\"https://docs.unity3d.com/uploads/Main/monobehaviour_flowchart.svg\">스크립트 라이프사이클 플로우차트(Script Lifecycle Flowchart)</a>를 참고할 때, 물리(Physics) 사이클이 Update와 LateUpdate 호출이 포함된 게임 로직(Game Logic) 사이클보다 항상 선행하므로 최종적인 Update 함수들의 호출 순서는 다음과 같다:</p>\n<blockquote>\n<p>FixedUpdate → Update → LateUpdate</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedUpdateExampleClass</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Rigidbody</span> rb<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        rb <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Rigidbody<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FixedUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rb <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rb<span class=\"token punctuation\">.</span><span class=\"token function\">AddForce</span><span class=\"token punctuation\">(</span><span class=\"token number\">10.0f</span> <span class=\"token operator\">*</span> Vector3<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FixedUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Update\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LateUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LateUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 위의 FixedUpdateExampleClass가 유니티 상에서 활성화되었다고 가정할 때, 콘솔에 출력될 각 함수들의 호출 순서 내지 문자열은 다음과 같다:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">FixedUpdate\nUpdate\nLateUpdate\nFixedUpdate\nUpdate\nLateUpdate\n<span class=\"token comment\">// (...) MonoBehaviour가 활성화된 경우 무한 반복</span></code></pre></div>\n<hr>\n<p>원문: <a href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.Update.html\">MonoBehaviour.Update()</a>, <a href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.LateUpdate.html\">MonoBehaviour.LateUpdate()</a>, <a href=\"https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html\">MonoBehaviour.FixedUpdate()</a></p>\n<p>최종 업데이트: 2018년 11월 14일</p>","frontmatter":{"title":"[Unity] Update 이벤트 함수 3형제: FixedUpdate, Update, LateUpdate"},"excerpt":"본문은 Update 이벤트 함수 3형제인 FixedUpdate, Update, LateUpdate를 개발자에게 친숙한 순서인 Update, LateUpdate, FixedUpdate…"}},"pageContext":{"slug":"/unity-update-event-function-types/"}},
    "staticQueryHashes": ["3159585216","63159454"]}