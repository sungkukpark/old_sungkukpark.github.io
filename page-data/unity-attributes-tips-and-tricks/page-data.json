{"componentChunkName":"component---src-templates-blog-post-js","path":"/unity-attributes-tips-and-tricks/","result":{"data":{"markdownRemark":{"html":"<!-- 참고용 예제 저장소: [Unity Practice (Sungkuk Park)] -->\n<h2>최근 변경 내역</h2>\n<ul>\n<li>[Header] 항목 추가 (2019년 1월 2일)</li>\n<li>[ContextMenu] 항목 추가 (2019년 1월 2일)</li>\n<li>[ContextMenuItem] 항목 추가 (2019년 1월 2일)</li>\n<li>[Multiline] 항목 추가 (2019년 1월 2일)</li>\n</ul>\n<hr>\n<h2>개요 (Overview)</h2>\n<p>Unity 엔진이 제공하는 어트리뷰트(Attributes) 관련된 각종 팁과 요령을 사용 목적에 따라 소개한다. 특히, 인스펙터 창(Inspector)을 용도에 맞게 활용하는 활용 팁들을 많이 수록했고 그 이외에도 어트리뷰트를 활용하는 예제들을 포함했다.</p>\n<hr>\n<h2>인스펙터 창 확장</h2>\n<h3>[Header]: 인스펙터 창의 구역을 범주별로 나누기</h3>\n<p>인스펙터 창에서 여러 개의 공개 변수를 표시하고 이를 입력 받아야 하는 경우가 있다. 이때, 너무 많은 변수들이 규칙 없이 나열되어 있으면 한눈에 알아보기 어렵다. 이때, [Header] 어트리뷰트를 사용해 인스펙터 창의 구역을 범주별로 나누면 인스펙터 창을 한눈에 들어오게 만들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HeaderExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Header</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Character Name\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> charName <span class=\"token operator\">=</span> <span class=\"token string\">\"Hero\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Header</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Character Stats\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxHealth <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> maxMana <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Header</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Quest Log\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> encounteredQuestCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> completedQuestCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> failedQuestCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![HeaderAttr]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/HeaderAttr.png) -->\n<h3>[ContextMenu]: 컴포넌트에 나만의 동작을 추가하기</h3>\n<p>인스펙터 창은 단지 변수를 편집하는 용도로 쓰는 것이 아니라, 변수에 대한 나만의(custom) 동작을 따로 추가하는 식으로 확장해 사용할 수 있다. 이때, [ContextMenu]는 해당 컴포넌트(Component)에 대해 나만의 함수를 추가해 호출할 수 있게 해준다. [ContextMenu] 어트리뷰트가 <strong>변수가 아닌 함수 위에 추가</strong>되는 것에 주목할 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextMenuExample1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> MaxHealth <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentHealth <span class=\"token operator\">=</span> MaxHealth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ContextMenu</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"ResetHealthToMaximum\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ResetHealthToMaximum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        currentHealth <span class=\"token operator\">=</span> MaxHealth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![BeforeContextMenu]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/BeforeContextMenu.png) -->\n<!-- ![AfterContextMenu]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/AfterContextMenu.png) -->\n<h3>[ContextMenuItem]: 변수에 나만의 동작을 추가하기</h3>\n<p>또한, [ContextMenuItem]을 활용하면 해당 변수(variable) 대해 나만의 함수를 추가해 호출할 수 있게 해준다. [ContextMenuItem] 어트리뷰트가 <strong>함수가 아닌 변수 위에 추가</strong>되는 것에 주목할 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextMenuExample2</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> MaxHealth <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ContextMenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Set Random Health Value\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"RandomizeHealth\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentHealth <span class=\"token operator\">=</span> MaxHealth<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RandomizeHealth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        currentHealth <span class=\"token operator\">=</span> UnityEngine<span class=\"token punctuation\">.</span>Random<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![BeforeContextMenuItem]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/BeforeContextMenuItem.png) -->\n<!-- ![AfterContextMenuItem]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/AfterContextMenuItem.png) -->\n<hr>\n<h2>변수 입력 범위 지정</h2>\n<h3>[Range]: 인스펙터 창에서 입력받을 값의 범위를 지정하기</h3>\n<p>인스펙터 창으로 값을 입력 받아야 하는 경우가 있는데, RGB Color 값처럼 0에서 255 사이의 정수값만을 입력해야 하는 경우가 있다. 이때, 아래와 같이 [Range] 어트리뷰트를 사용해 인스펙터 창에서 입력받을 값의 범위를 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RangeExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 0부터 255까지의 정수값을 인스펙터 창을 통해 지정</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Range</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> intVariableThatMustBeClamped <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 0부터 1까지의 실수값을 인스펙터 창을 통해 지정</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Range</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> floatVariableThatMustBeClamped <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 0부터 100까지의 실수값을 인스펙터 창을 통해 지정</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Range</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> doubleVariableThatMustBeClamped <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단, <strong>해당 변수에 들어있는 값은 아래와 같이 실제 Range 어트리뷰트에 인자로 주어진 범위 내로 한정되지는 않는다</strong>. 해당 범위는 단지 인스펙터 창에서 입력 가능한 범위에 영향을 줄 뿐이다.</p>\n<!-- ![BeforeClamped]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/BeforeClamped.png) -->\n<p>아래에서는 인스펙터 창에서의 편집을 통해 Range 어트리뷰트에 인자로 주어진 범위 내의 값을 다시 지정했다. 주어진 범위 바깥의 값을 입력할 수 없는 것을 확인할 수 있다.</p>\n<!-- ![AfterClamped]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/AfterClamped.png) -->\n<hr>\n<h2>문자열 변경</h2>\n<h3>[TextArea]: 인스펙터 창에서 여러 줄의 텍스트 편집하기</h3>\n<p>여러 줄의 텍스트(multi-line text)를 string 타입의 공개 변수를 선언해 인스펙터 창으로 입력 받고 싶은 경우가 있을 것이다. 예컨대, 게임 내 등장인물들 간의 대화(dialogues) 데이터를 프로토타이핑하는 경우를 상정할 수 있다. 하지만, 기존 인스펙터 창의 string 변수를 입력받는 필드는 한 줄씩만 입력받는다. 우선, 아래와 같이 string 타입의 변수가 public으로 선언되고 실제 여러 줄의 텍스트로 해당 변수에 할당되었다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TextAreaExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> multiLineTextInput <span class=\"token operator\">=</span> <span class=\"token string\">\"Pikachu\\n Raichu\\n Charmander\\n Squirtle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우, 실제 변수 \"multiLineTextInput\"에는 정확히 여러 줄의 텍스트가 정상적으로 할당되어 있다. 하지만, 인스펙터 창에서는 한 줄 씩만 보여주므로 아래와 같이 인스펙터 창을 통한 편집이 매우 어렵다.</p>\n<!-- ![NoTextAreaAttr]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/NoTextAreaAttr.png) -->\n<blockquote>\n<p>일반적인 string 변수는 인스펙터 창에서 한 줄 씩만 편집할 수 있다.</p>\n</blockquote>\n<p>이때, 아래와 같이 [TextArea] 어트리뷰트를 사용하면 인스펙터 창에서도 여러 줄의 텍스트를 편집하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TextAreaExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TextArea</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> multiLineTextInput <span class=\"token operator\">=</span> <span class=\"token string\">\"Pikachu\\n Raichu\\n Charmander\\n Squirtle\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![YesTextAreaAttr]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/YesTextAreaAttr.png) -->\n<blockquote>\n<p>[TextArea] 어트리뷰트를 통해 인스펙터 창에서 여러 줄의 텍스트를 편집할 수 있게 되었다.</p>\n</blockquote>\n<p>그러나 여전히 Insepctor 창은 장문의 텍스트를 관리하는 용도로는 적합하지 않으므로, JSON이나 다른 파일 기반으로 여러 줄의 텍스트를 입력받기를 권장한다.</p>\n<h3>[Multiline]: 인스펙터 창에서 여러 줄의 텍스트 편집하기 (다른 방법)</h3>\n<p>[TextArea] 어트리뷰트의 경우는 인스펙터 창에서 변수명 다음에 줄바꿈을 한 뒤 텍스트를 변경하는 식으로 출력된다. 만일, 인스펙터 창에서 다른 변수와 동일하게 변수명 뒤에 줄바꿈 없이 여러 줄의 텍스트를 편집하는 구역이 표시되게 하고 싶으면 [TextArea] 대신 [Multiline] 어트리뷰트를 쓰면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiLineEditingExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Header</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using TextArea\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TextArea</span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> multiLineTextInput1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Pikachu\\n Raichu\\n Charmander\\n Squirtle\"</span><span class=\"token punctuation\">;</span>\n     \n     <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Header</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Using Multiline\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Multiline</span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> multiLineTextInput2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Pikachu\\n Raichu\\n Charmander\\n Squirtle\"</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![MultilineAttr]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/MultilineAttr.png) -->\n<hr>\n<h2>캡슐화 (Encapsulation)</h2>\n<h3>[HideInInspector]: 인스펙터 창에서 public 변수 숨기기</h3>\n<p>다음처럼 public 변수이지만 인스펙터 창에서는 보이거나 변경해서는 안 되는 변수가 있다고 치자.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HideInInspectorExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> publicVariableButMustNotShowInInspector<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이때, [HideInInspector]를 사용하면 해당 변수를 인스펙터 창에서 숨기면서 해당 변수가 여전히 직렬화(be serialized)되도록 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HideInInspectorExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">HideInInspector</span></span><span class=\"token punctuation\">]</span>\n     <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> publicVariableButMustNotShowInInspector<span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2>직렬화 (Serialization)</h2>\n<h3>[FormerlySerializedAs]: 변수명을 바꾸면서도 기존의 변수값을 보존하기</h3>\n<p>일반적으로, 인스펙터 창을 통해 변수값을 입력한 뒤 나중에 변수명을 바꾸면 해당 변수의 값은 초기화된다. 변수명을 바꾸는 것은 자주 있는 일이기 때문에 매번 인스펙터 창에 접근해 해당 변수값을 기억했다가 다시 그 값을 할당하는 것은 지나치게 번거롭다.</p>\n<p>예를 들어, 다음과 같은 변수가 선언되고 다음과 같은 변수값이 인스펙터 창을 통해 할당되었다고 가정하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormerlySerializedAsExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> importantDataThatHasToBeRenamed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![BeforeRenamed]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/BeforeRenamed.png) -->\n<p>이때, [FormerlySerializedAs] 어트리뷰트를 사용하면 변수명을 바꾸면서도 기존의 변수 값을 보존할 수 있다. 용법은 다음과 같다:</p>\n<p><code class=\"language-text\">[FormerlySerializedAs(&quot;기존 변수명&quot;)]</code></p>\n<p>아래와 같이, [FormerlySerializedAs] 어트리뷰트를 통해 기존의 직렬화된(serialized) 변수값이 보존되게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormerlySerializedAsExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">FormerlySerializedAs</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"importantDataThatHasToBeRenamed\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> renamedImportantDataThatHasToBeRenamed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<!-- ![AfterRenamed]({{ site.url }}/assets/2019-01-01-unity-attributes-tips-and-tricks/AfterRenamed.png) -->\n<h3>[SerializeField]: 인스펙터 창에서 private 변수 확인 또는 변경하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeFieldExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> _privateVariableButMustBeModifiedInInspector<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 경우, [SerializeField]를 사용하면 해당 변수를 인스펙터 창에 공개하면서도 여전히 스크립트 상에서는 private 변수로 취급할 수 있다. 이는 private 변수값의 변화를 인스펙터 상에서 추적하는 디버깅 용도로서 유용하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SerializeFieldExample</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> _privateVariableButMustBeModifiedInInspector<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단, private 변수라도 인스펙터 창에서 해당 변수를 마음대로 변경할 수 있으므로 이는 <strong>객체 지향의 정보 은닉성(Information Hiding)에 위배</strong>된다. 따라서, [SerializeField]는 데이터 변경의 비용 절감에서 얻는 편익이 정보 은닉성을 위배할 때 발생하는 비용보다 클 때만 도입하도록 한다.</p>","frontmatter":{"title":"[Unity] 유니티 어트리뷰트(Attributes) 활용 팁 총정리"},"excerpt":"최근 변경 내역 [Header] 항목 추가 (2019년 1월 2일) [ContextMenu] 항목 추가 (2019년 1월 2일) [ContextMenuItem] 항목 추가 (2019년 1월 2일) [Multiline] 항목 추가 (2019년 1월…"}},"pageContext":{"slug":"/unity-attributes-tips-and-tricks/"}},"staticQueryHashes":["3159585216","63159454"]}