{"componentChunkName":"component---src-templates-blog-post-js","path":"/essy_scribo_ergo_sum/","result":{"data":{"markdownRemark":{"html":"<p>최근 글쓰는 시간을 늘리고 있는데, 타인의 글에서 문제점을 발견하는 빈도가 이에 비례해 확실히 늘고 있다. 글을 쓰는 훈련은 좋은 독자로서의 능력을 배양한다. 짧은 글이라도 비판할 지점을 단 하나도 찾아내지 못하는 독자는 무능한 학습자이다. 좋다고 느끼는 글만 퍼날르는 사람들은 무력하다.</p>\n<p>아무리 좋은 정보라도 곱씹고 깨달아/익혀 본인의 삶을 더 낫게 바꾸는데 쓰이지 못한다면 그 정보를 얻는데 사용된 인지 자원은 낭비된 것. ROI(Return on Investment). 여기서의 이익은 개인이 새로 생산하는 코드나 글 등의 결과물의 품질 * 양으로 표현할 수 있다. 이외의 '배웠다'는 느낌은 함정.</p>\n<p>인간은 글을 쓰는 만큼 생각한 것이다. 읽은 만큼 생각한 것이 아니라. 읽는 것은 글을 쓰는 것보다 어렵지 않다. 어렵지 않으면 학습은 일어나지 않는다. 물론 남의 글을 짜깁기하거나 베껴 쓰는 것은 포함하지 않는다. 책을 1000권을 읽어도 밀도 높은 글을 쓰지 않는 인간은 제자리일 수 밖에 없다.</p>\n<p>더 낫게 성장하기 위해 밀도 높은 코드를/글을 작성한다. 더 나은 코드를/글을 작성하기 위해 밀도 높게 성장한다. 지적 밀도(密度), 지적 성실성, 지적 윤리, 지적 훈련. 그림도 마찬가지일 것이다. 어떤 이론/학습법도 그 자체로는 의미가 없다. 결국 화가/애니메이터 역시 그린만큼 성장하는 존재.</p>\n<p>아무리 하찮은 인간도 밀도 있는 글을 쓰면 전혀 다른 존재로 성장한다. 글쓰기는 그런 것이다. 프로그래밍도 그럴 것이다. 코드 한 줄이라도 밀도 있게 코딩을 하려면 그 코드는 고려해야 할 게 너무도 많다. 기능과 문법은 기본이고 아키텍처 디자인, 패턴, 성능, 기존 코드 베이스를 고려해야 한다.</p>\n<p>빌 게이츠는 최상급 프로그래머를 뽑을 때 엄청 긴 코드 뭉치를 주고 이를 얼마나 빠른 시간에 파악하는지 봤다 들었다. 도널드 누스(Donald Knuth)의 책에 대한 그의 추천평도 해당 책을 다 읽었을 때 MS에 지원해달라는 당부이다. 이는 무엇을 의미하는가? \"최고의 코더는 최고의 독자\"라는 뜻이다.</p>\n<p>즉, 독자 본인이 최고의 코드를 짜고 최고의 글을 쓸 수 없다면 최고의 코드나 글의 진면목을 알아볼 리 없다. 오히려 그 코드나 글은 어렵게 느껴질 것이다. 그래서 나는 리처드 파인만(Richard Feynman)을 들어 고수는 뭐든 상대가 쉽게 이해할 수 있도록 쉽게 설명해야 한다는 말이 틀렸다고 본다.</p>\n<p>어떤 진리는 더 쉽게 설명될 수 없다. 이때문에 학생은 본인이 알아서 해당 지식을 이해할 수 있는 근간이 되는 지식을 미리 갖춘 다음 다시 해당 지식을 이해하려고 노력해야 한다. 수준이 안 되는 개발자는 높은 수준의 코드 앞에서 쩔쩔 맬 수밖에 없다. 결국 지적 생산과 소비는 일치되어야 한다.</p>\n<p><em>나는 쓴다, 고로 존재한다(Scribo, ergo sum)</em>.</p>","frontmatter":{"title":"[에세이] 나는 쓴다, 고로 존재한다"},"excerpt":"…"}},"pageContext":{"slug":"/essy_scribo_ergo_sum/"}},"staticQueryHashes":["3159585216","63159454"]}