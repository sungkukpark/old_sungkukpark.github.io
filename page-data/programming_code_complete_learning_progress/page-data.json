{"componentChunkName":"component---src-templates-blog-post-js","path":"/programming_code_complete_learning_progress/","result":{"data":{"markdownRemark":{"html":"<p>본 포스팅은 박성국의 『Code Complete 2nd Ed.』에 대한 학습 진도를 표현한다.</p>\n<hr>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Part 1. Laying the Foundation\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 1. Welcome to Software Construction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 2. Metaphors for a Richer Understanding of Software Development</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 3. Measure Twice, Cut Once: Upstream Prerequisites</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 4. Key Construction Decisions</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Part 2. Creating High-Quality Code\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 5. Design in Construction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 6. Working Classes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 7. High-Quality Routines</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 8. Defensive Programming</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 9. The Pseudocode Programming Process</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Part 3. Variables\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 10. General Issues in Using Variables</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 11. The Power of Variable Names</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 12. Fundamental Data Types</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 13. Unusual Data Types</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Part 4. Statements\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 14. Organizing Straight-Line Code</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 15. Using Conditionals</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 16. Controlling Loops</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 17. Unusual Control Structures</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 18. Table-Driven Methods</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 19. General Control Issues</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> V. Code Improvements\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 20. The Software-Quality Landscape</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 21. Collaborative Construction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 22. Developer Testing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 23. Debugging</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 24. Refactoring</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 25. Code-Tuning Strategies</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 26. Code-Tuning Techniques</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> VI. System Considerations\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 27. How Program Size Affects Construction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 28. Managing Construction</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 29. Integration</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 30. Programming Tools</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> VII. Software Craftsmanship\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 31. Layout and Style</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 32. Self-Documenting Code</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 33. Personal Character</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 34. Themes in Software Craftsmanship</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 35. Where to Find More Information</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[프로그래밍] 『Code Complete, 2nd Ed.』 학습 진도"},"excerpt":"본 포스팅은 박성국의 『Code Complete 2nd Ed.』에 대한 학습 진도를 표현한다. Part 1. Laying the Foundation 1. Welcome to Software Construction 2. Metaphors for a…"}},"pageContext":{"slug":"/programming_code_complete_learning_progress/"}},"staticQueryHashes":["3159585216","63159454"]}